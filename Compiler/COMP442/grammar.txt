prog -> { classDecl } { funcDef } 'main' funcBody ';'
classDecl -> 'class' 'id' [ ':' 'id' { ',' 'id' } ] '{' { varDecl } { funcDecl } '}' ';'
funcDecl -> type 'id' '(' fParams ')' ';'
funcHead -> type [ 'id' '::' ] 'id' '(' fParams ')'
funcDef -> funcHead funcBody ';'
funcBody -> '{' { varDecl } { statement } '}'
varDecl -> type 'id' { arraySize } ';'
statement -> assignStat ';'
 | 'if' '(' expr ')' 'then' statBlock 'else' statBlock ';'
 | 'for' '(' type 'id' assignOp expr ';' relExpr ';' assignStat ')' statBlock ';'
 | 'read' '(' variable ')' ';'
 | 'write' '(' expr ')' ';'
 | 'return' '(' expr ')' ';'
assignStat -> variable assignOp expr
statBlock -> '{' { statement } '}' | statement | EPSILON
expr -> arithExpr [ exprSub ]
exprSub -> relOp arithExpr
relExpr -> arithExpr relOp arithExpr
arithExpr -> term { arithExprSub }
arithExprSub -> addOp term
sign -> '+' | '-'
term -> factor { termSub }
termSub -> multOp factor
factor -> varCall0
 | '10'
 | '1.1'
 | '(' arithExpr ')'
 | '!' factor
 | sign factor
variable -> { idnest } 'id' { indice }
functionCall -> '(' aParams ')'
varCall0 -> { idnest } 'id' varCall1
varCall1 -> functionCall | { indice }
idnest -> 'id' idnestSub
idnestSub -> { indice } '.' | 'id' '(' aParams ')' '.'
indice -> '[' arithExpr ']'
arraySize -> '[' '1' ']'
type -> 'integer' | 'float' | 'id'
fParams -> type 'id' { arraySize } { fParamsTail } | EPSILON
aParams -> expr { aParamsTail } | EPSILON
fParamsTail -> ',' type 'id' { arraySize }
aParamsTail -> ',' expr
assignOp -> '='
relOp -> '==' | '<>' | '<' | '>' | '<=' | '>='
addOp -> '+' | '-' | '||'
multOp -> '*' | '/' | '&&'